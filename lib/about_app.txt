Я пишу приложение для пользователя, которому нужно выучить таблицу умножения. Помоги мне пожалуйста определится со структурой проекта. Все ответы пиши мне на русском языке.
Tabnine
Tabnine Protected
Вы можете организовать ваше приложение следующим образом:

1. Создайте папку проекта - например, multiplication_table_console.
2. Создайте папку `lib` - это основная папка для ваших исходных файлов Dart.
3. Создайте папку `lib/models` - здесь вы можете хранить все ваши модели, такие как User, Task, и UserTask.
4. Создайте файл `lib/models/user.dart` - определите структуру User с полями, которые вам нужны, 
   например, имя пользователя и другие данные.
5. Создайте файл `lib/models/task.dart` - определите структуру Task с полями, такими как числа для умножения и результат.
6. Создайте файл `lib/models/user_task.dart` - определите структуру UserTask, 
   которая будет хранить информацию о текущей задаче пользователя, 
   включая ответ пользователя, правильность ответа и статистику.

7. Создайте папку `lib/services` - здесь вы можете хранить все ваши сервисы, 
   такие как генератор задач и обработчик ввода пользователя.

   В приложении для изучения таблицы умножения будут использоваться следующие сервисы:
        1 - TaskGenerator - сервис для генерации задач. Обычно он содержит методы для создания новых задач, 
        где два числа для умножения будут случайно выбраны из определенного диапазона.
        2 - UserInputHandler - сервис для обработки ввода пользователя и проверки ответа. 
        Обычно он содержит методы для получения ответа пользователя, проверки ответа на правильность, 
        и сохранения статистики пользователя.


Эти сервисы помогают разделить логику приложения и упрощают тестирование и поддержку кода.

8. Создайте файл `lib/services/task_generator.dart` - определите сервис для генерации задач, 
   например, случайных чисел для умножения.

9. Создайте файл `lib/services/user_input_handler.dart` - определите сервис для обработки ввода пользователя и проверки ответа.

10. Создайте папку `lib/controllers` - здесь вы можете хранить все ваши контроллеры, 
    которые будут управлять логикой приложения.

11. Создайте файл `lib/controllers/game_controller.dart` - определите контроллер для управления игровым процессом, 
    включая создание задач, обработку ответов пользователя и подсчет статистики.

12. Создайте папку `lib/views` - здесь вы можете хранить все ваши представления, 
    такие как экраны меню, экраны игры и экраны статистики.

13. Создайте файл `lib/views/menu_view.dart` - определите представление для меню игры, 
    включая опции для начала игры, просмотра статистики и выхода из приложения.

14. Создайте файл `lib/views/game_view.dart` - определите представление для игры, включая отображение текущей задачи, 
    ввод ответа пользователя и отображение результатов.

15. Создайте файл `lib/views/statistics_view.dart` - определите представление для статистики, 
    включая отображение статистики пользователя, такой как количество правильных и неправильных ответов.

16. Создайте файл `lib/main.dart` - определите точку входа в приложение и запустите меню игры.